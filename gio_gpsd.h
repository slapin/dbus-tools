/*
 * Generated by gdbus-codegen 2.30.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GIO_GPSD_H__
#define __GIO_GPSD_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gpsd */

#define GPSD_TYPE_ORG_GPSD (gpsd_org_gpsd_get_type ())
#define GPSD_ORG_GPSD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPSD_TYPE_ORG_GPSD, gpsdOrgGpsd))
#define GPSD_IS_ORG_GPSD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPSD_TYPE_ORG_GPSD))
#define GPSD_ORG_GPSD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GPSD_TYPE_ORG_GPSD, gpsdOrgGpsdIface))

struct _gpsdOrgGpsd;
typedef struct _gpsdOrgGpsd gpsdOrgGpsd;
typedef struct _gpsdOrgGpsdIface gpsdOrgGpsdIface;

struct _gpsdOrgGpsdIface
{
  GTypeInterface parent_iface;

  void (*fix) (
    gpsdOrgGpsd *object,
    GVariant *arg_data);

  void (*telemetry) (
    gpsdOrgGpsd *object,
    GVariant *arg_data);

};

GType gpsd_org_gpsd_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gpsd_org_gpsd_interface_info (void);
guint gpsd_org_gpsd_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void gpsd_org_gpsd_emit_fix (
    gpsdOrgGpsd *object,
    GVariant *arg_data);

void gpsd_org_gpsd_emit_telemetry (
    gpsdOrgGpsd *object,
    GVariant *arg_data);



/* ---- */

#define GPSD_TYPE_ORG_GPSD_PROXY (gpsd_org_gpsd_proxy_get_type ())
#define GPSD_ORG_GPSD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPSD_TYPE_ORG_GPSD_PROXY, gpsdOrgGpsdProxy))
#define GPSD_ORG_GPSD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPSD_TYPE_ORG_GPSD_PROXY, gpsdOrgGpsdProxyClass))
#define GPSD_ORG_GPSD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPSD_TYPE_ORG_GPSD_PROXY, gpsdOrgGpsdProxyClass))
#define GPSD_IS_ORG_GPSD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPSD_TYPE_ORG_GPSD_PROXY))
#define GPSD_IS_ORG_GPSD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPSD_TYPE_ORG_GPSD_PROXY))

typedef struct _gpsdOrgGpsdProxy gpsdOrgGpsdProxy;
typedef struct _gpsdOrgGpsdProxyClass gpsdOrgGpsdProxyClass;
typedef struct _gpsdOrgGpsdProxyPrivate gpsdOrgGpsdProxyPrivate;

struct _gpsdOrgGpsdProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  gpsdOrgGpsdProxyPrivate *priv;
};

struct _gpsdOrgGpsdProxyClass
{
  GDBusProxyClass parent_class;
};

GType gpsd_org_gpsd_proxy_get_type (void) G_GNUC_CONST;

void gpsd_org_gpsd_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
gpsdOrgGpsd *gpsd_org_gpsd_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
gpsdOrgGpsd *gpsd_org_gpsd_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gpsd_org_gpsd_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
gpsdOrgGpsd *gpsd_org_gpsd_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
gpsdOrgGpsd *gpsd_org_gpsd_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GPSD_TYPE_ORG_GPSD_SKELETON (gpsd_org_gpsd_skeleton_get_type ())
#define GPSD_ORG_GPSD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPSD_TYPE_ORG_GPSD_SKELETON, gpsdOrgGpsdSkeleton))
#define GPSD_ORG_GPSD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPSD_TYPE_ORG_GPSD_SKELETON, gpsdOrgGpsdSkeletonClass))
#define GPSD_ORG_GPSD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPSD_TYPE_ORG_GPSD_SKELETON, gpsdOrgGpsdSkeletonClass))
#define GPSD_IS_ORG_GPSD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPSD_TYPE_ORG_GPSD_SKELETON))
#define GPSD_IS_ORG_GPSD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPSD_TYPE_ORG_GPSD_SKELETON))

typedef struct _gpsdOrgGpsdSkeleton gpsdOrgGpsdSkeleton;
typedef struct _gpsdOrgGpsdSkeletonClass gpsdOrgGpsdSkeletonClass;
typedef struct _gpsdOrgGpsdSkeletonPrivate gpsdOrgGpsdSkeletonPrivate;

struct _gpsdOrgGpsdSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  gpsdOrgGpsdSkeletonPrivate *priv;
};

struct _gpsdOrgGpsdSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gpsd_org_gpsd_skeleton_get_type (void) G_GNUC_CONST;

gpsdOrgGpsd *gpsd_org_gpsd_skeleton_new (void);


G_END_DECLS

#endif /* __GIO_GPSD_H__ */
